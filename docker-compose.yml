#
# University of Pisa - Advanced Software Engineering - 2021-2022
# Main docker-compose File
# Project:
#┌─────────────────────────────────────────────────────────────────────────────────────────┐ 
#│  __  __                                  _                 ____        _   _   _        │ 
#│ |  \/  | ___  ___ ___  __ _  __ _  ___  (_)_ __     __ _  | __ )  ___ | |_| |_| | ___   │
#│ | |\/| |/ _ \/ __/ __|/ _` |/ _` |/ _ \ | | '_ \   / _` | |  _ \ / _ \| __| __| |/ _ \  │
#│ | |  | |  __/\__ \__ \ (_| | (_| |  __/ | | | | | | (_| | | |_) | (_) | |_| |_| |  __/  │ 
#│ |_|  |_|\___||___/___/\__,_|\__, |\___| |_|_| |_|  \__,_| |____/ \___/ \__|\__|_|\___|  │ 
#│                              |___/                                                      │ 
#└─────────────────────────────────────────────────────────────────────────────────────────┘

version: '3.8'

services:

  # -------------------------------------------- #
  # Starting with API Gateway and Load Balancer  #
  # -------------------------------------------- #

  nginx_lb_orchestrator:
    #
    # Nginx Orchestrator instance
    #
    container_name: load_balancer_orchestrator
    restart: always
    build: ./MMIAB-gateway/nginx-orchestrator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # WARNING: with Winzozz it does not work, but we need it!
      - nginx_conf:/etc/nginx/conf.d

  nginx_lb:
    #
    # Nginx single instance
    #
    container_name: load_balancer
    restart: always
    build: ./MMIAB-gateway/nginx
    labels:
      - mib.nginx_lb
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - static_contents:/static
    ports:
      - "80:80"

  api_gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./MMIAB-gateway
    volumes:
      - static_contents:/static
    env_file:
      - gateway.conf
    environment:
      - USERS_MS_HOST=users_ms_worker
    labels:
      - mib.api_gateway_worker

  # -------------------------------------------- #
  # Common Services                              #
  # -------------------------------------------- #

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"

  # -------------------------------------------- #
  # Users Microservice                           #
  # -------------------------------------------- #
  users_ms_db:
    # Users Microservice Database
    image: library/postgres:10
    restart: on-failure
    env_file:
      - users_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      # this is only for development purpose
      - "5432:5432"

  users_ms_migrations:
    # Users Microservice Migrations
    build: ./MMIAB-user-microservice
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      users_ms_db:
        condition: service_healthy

  users_ms_worker:
    # Users Microservice Worker node
    build: ./MMIAB-user-microservice
    restart: on-failure
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
    depends_on:
      users_ms_db:
        condition: service_healthy
      users_ms_migrations:
        condition: service_started

  # -------------------------------------------- #
  # Message Microservice                         #
  # -------------------------------------------- #
  message_ms_db:
    # Message Microservice Database
    image: library/postgres:10
    restart: on-failure
    env_file:
      - message_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # ports:
    #   # this is only for development purpose
    #   - "5432:5432"

  message_ms_migrations:
    # Message Microservice Migrations
    build: ./MMIAB-message-microservice
    env_file:
      - message_ms.conf
    environment:
      - POSTGRES_HOST=message_ms_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      message_ms_db:
        condition: service_healthy

  message_ms_celery:
    # Message Microservice Celery
    build:
      context: ./MMIAB-message-microservice
      dockerfile: DockerfileCelery
    command: [celery, -A, mib.background, worker, -l, INFO, -Q, message]
    depends_on:
      - redis
      - message_ms_worker
    env_file:
      - message_ms.conf

  message_ms_worker:
    # Message Microservice Worker node
    build: ./MMIAB-message-microservice
    restart: on-failure
    env_file:
      - message_ms.conf
    environment:
      - POSTGRES_HOST=message_ms_db
    depends_on:
      message_ms_db:
        condition: service_healthy
      message_ms_migrations:
        condition: service_started
      users_ms_worker:
        condition: service_started

  # -------------------------------------------- #
  # Notifications Microservice                   #
  # -------------------------------------------- #
  notifications_ms_worker:
    # Notifications Microservice Worker node
    build: ./MMIAB-send_notification-microservice
    restart: on-failure
    env_file:
      - notifications_ms.conf

  # -------------------------------------------- #
  # Periodic Tasks Microservice                  #
  # -------------------------------------------- #
  periodic_task_ms_worker:
    # Periodic Tasks Microservice Worker node
    build: ./MMIAB-periodic_tasks-microservice
    restart: on-failure
    depends_on:
      - redis
    env_file:
      - periodic_task_ms.conf
  
  periodic_task_ms_celery:
    # Periodic Tasks Microservice Celery
    build:
      context: ./MMIAB-periodic_tasks-microservice
      dockerfile: DockerfileCelery
    command: [celery, -A, mib.background, worker , -l, INFO]
    depends_on:
      - redis
    env_file:
      - periodic_task_ms.conf

  periodic_task_ms_scheduler:
    # Periodic Tasks Microservice Scheduler
    build:
      context: ./MMIAB-periodic_tasks-microservice
      dockerfile: DockerfileCelery
    command: [celery, -A, mib.background, beat , -l, INFO]
    depends_on:
      - redis
    env_file:
      - periodic_task_ms.conf

volumes:
  # -------------------------------------------- #
  # Volumes                                      #
  # -------------------------------------------- #

  nginx_conf: null
    # Nginx configuration volume

  static_contents: null # API Gateway static content volume
